package src;

import static java.lang.Math.abs;
import static java.lang.Math.min;

import java.awt.Point;
import java.awt.Shape;
import java.awt.event.ActionEvent;
import java.awt.event.MouseEvent;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Path2D;
import java.awt.geom.Rectangle2D;

import javax.swing.AbstractAction;
import javax.swing.event.MouseInputListener;

@SuppressWarnings("serial")
class Tool extends AbstractAction implements MouseInputListener {
	Point o;
	Shape shape;
	Canvas can;

	public Tool(String name, Canvas c) {
		super(name);
		this.can = c;
	}

	public void actionPerformed(ActionEvent e) {
		System.out.println("using tool " + this);
		can.removeMouseListener(tool);
		can.removeMouseMotionListener(tool);
		tool = this;
		can.addMouseListener(tool);
		can.addMouseMotionListener(tool);
	}

	public void mouseClicked(MouseEvent e) {
	}

	public void mouseEntered(MouseEvent e) {
	}

	public void mouseExited(MouseEvent e) {
	}

	public void mousePressed(MouseEvent e) {
		o = e.getPoint();
	}

	public void mouseReleased(MouseEvent e) {
		shape = null;
	}

	public void mouseDragged(MouseEvent e) {
	}

	public void mouseMoved(MouseEvent e) {
	}
	
	Tool tools[] = { new Tool("pen", can) {
		public void mouseDragged(MouseEvent e) {
			Path2D.Double path = (Path2D.Double) shape;
			if (path == null) {
				path = new Path2D.Double();
				path.moveTo(o.getX(), o.getY());
				ColoredShape cs = new ColoredShape((shape = path), c);
				shapes.add(cs);
			}
			path.lineTo(e.getX(), e.getY());
			can.repaint();
		}
	}, new Tool("rect") {
		public void mouseDragged(MouseEvent e) {
			Rectangle2D.Double rect = (Rectangle2D.Double) shape;
			if (rect == null) {
				rect = new Rectangle2D.Double(o.getX(), o.getY(), 0, 0);
				ColoredShape cs = new ColoredShape((shape = rect), c);
				shapes.add(cs);
			}
			rect.setRect(min(e.getX(), o.getX()), min(e.getY(), o.getY()), abs(e.getX() - o.getX()),
					abs(e.getY() - o.getY()));
			can.repaint();
		}
	}, new Tool("ellipse") {
		public void mouseDragged(MouseEvent e) {
			Ellipse2D.Double ell = (Ellipse2D.Double) shape;
			if (ell == null) {
				ell = new Ellipse2D.Double(o.getX(), o.getY(), 0, 0);
				ColoredShape cs = new ColoredShape((shape = ell), c);
				shapes.add(cs);
			}
			ell.setFrame(min(e.getX(), o.getX()), min(e.getY(), o.getY()), abs(e.getX() - o.getX()),
					abs(e.getY() - o.getY()));
			can.repaint();
		}
	} };
	Tool tool;
}